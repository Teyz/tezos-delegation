// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package database_mocks is a generated GoMock package.
package database_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities_delegation_v1 "github.com/teyz/tezos-delegation/internal/entities/delegation/v1"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateDelegation mocks base method.
func (m *MockDatabase) CreateDelegation(ctx context.Context, req *entities_delegation_v1.Delegation_Create) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelegation", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDelegation indicates an expected call of CreateDelegation.
func (mr *MockDatabaseMockRecorder) CreateDelegation(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelegation", reflect.TypeOf((*MockDatabase)(nil).CreateDelegation), ctx, req)
}

// FetchDelegations mocks base method.
func (m *MockDatabase) FetchDelegations(ctx context.Context, offset, limit int) ([]*entities_delegation_v1.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDelegations", ctx, offset, limit)
	ret0, _ := ret[0].([]*entities_delegation_v1.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDelegations indicates an expected call of FetchDelegations.
func (mr *MockDatabaseMockRecorder) FetchDelegations(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDelegations", reflect.TypeOf((*MockDatabase)(nil).FetchDelegations), ctx, offset, limit)
}

// FetchDelegationsByYear mocks base method.
func (m *MockDatabase) FetchDelegationsByYear(ctx context.Context, year, offset, limit int) ([]*entities_delegation_v1.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDelegationsByYear", ctx, year, offset, limit)
	ret0, _ := ret[0].([]*entities_delegation_v1.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDelegationsByYear indicates an expected call of FetchDelegationsByYear.
func (mr *MockDatabaseMockRecorder) FetchDelegationsByYear(ctx, year, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDelegationsByYear", reflect.TypeOf((*MockDatabase)(nil).FetchDelegationsByYear), ctx, year, offset, limit)
}
